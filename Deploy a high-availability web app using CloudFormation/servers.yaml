Description: |
  This stack is for servers Part. 

Parameters:

  EnvironmentName:
    Type: String

Resources:

  WebServersSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts
      VpcId:
        Fn::ImportValue:
          !Sub ${EnvironmentName}-VPCID
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0 

  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub ${EnvironmentName}-VPCID
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update
          sudo apt-get install apache2 -y
          sudo apt-get install awscli -y
          sudo apt-get install unzip -y
          sudo aws s3 cp s3://udagram-bucket-sherifhmdy/udagram.zip /var/www/html/
          sudo unzip /var/www/html/udagram.zip -d /var/www/html/
          sudo rm -rf /var/www/html/udagram.zip
          sudo systemctl start apache2.service          
      ImageId: ami-0279c3b3186e54acd
      SecurityGroups:
      - Ref: WebServersSG
      InstanceType: t3.medium
      IamInstanceProfile: !Ref UdagramProfile
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: 10        

  UdagramProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - EC2UdaS3ReadOnly

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub ${EnvironmentName}-PVT-NETS
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: 4
      MaxSize: 4
      TargetGroupARNs:
      - Ref: WebAppTargetGroup          

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /udagram
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: ${EnvironmentName}-VPCID

  WebAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub ${EnvironmentName}-PUB-1
      - Fn::ImportValue: !Sub ${EnvironmentName}-PUB-2
      SecurityGroups:
      - Ref: LoadBalancerSG
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLoadBalancer
      Port: '80'
      Protocol: HTTP
  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref Listener
        Priority: 1

Outputs:
  LoadBalancerDNS:
    Value:  !GetAtt WebAppLoadBalancer.DNSName
    Export:
      Name: !Sub ${EnvironmentName}-LoadBalancerDNS
  
  WebAppURL:
    Value: !Join ["",[ http://,  !GetAtt WebAppLoadBalancer.DNSName ,/udagram/ ]]
    Export:
      Name: !Sub ${EnvironmentName}-WebAppURL